rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is a specific user
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has a specific role
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.rol == role;
    }
    
    // Admin role check
    function isAdmin() {
      return hasRole('admin');
    }

    // Doctor role check
    function isDoctor() {
      return hasRole('doctor');
    }
    
    // Patient role check
    function isPaciente() {
      return hasRole('paciente');
    }
    
    // Users collection security rules
    match /usuarios/{userId} {
      // Anyone can read public doctor profiles
      allow read: if isUser(userId) || 
                    isAdmin() || 
                    (get(/databases/$(database)/documents/usuarios/$(userId)).data.rol == 'doctor' && 
                     get(/databases/$(database)/documents/usuarios/$(userId)).data.activo == true);
      
      // Only the user themselves or an admin can update their profile
      allow create, update: if isAuthenticated() && (isAdmin() || isUser(userId));
      
      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }
    
    // Appointments collection security rules
    match /citas/{citaId} {
      // Allow read to involved parties
      allow read: if isAuthenticated() && 
                    (isAdmin() || 
                    isUser(resource.data.pacienteId) || 
                    isUser(resource.data.doctorId));
      
      // Patients can create appointments
      allow create: if isAuthenticated() && 
                     request.resource.data.pacienteId == request.auth.uid;
      
      // Only involved parties can update appointments
      allow update: if isAuthenticated() && 
                     (isAdmin() || 
                     isUser(resource.data.pacienteId) || 
                     isUser(resource.data.doctorId));
                     
      // Only admins can delete appointments
      allow delete: if isAdmin();
    }
    
    // Medical history collection security rules
    match /historial_medico/{recordId} {
      // Allow read to involved parties or authorized doctors
      allow read: if isAuthenticated() && 
                   (isAdmin() || 
                   isUser(resource.data.pacienteId) || 
                   isUser(resource.data.doctorId) ||
                   (isDoctor() && exists(/databases/$(database)/documents/acceso_historial/$(recordId + '_' + request.auth.uid))));
      
      // Only doctors can create medical records
      allow create: if isAuthenticated() && isDoctor();
      
      // Only the doctor who created the record can update it
      allow update: if isAuthenticated() && isUser(resource.data.doctorId);
      
      // Only admins can delete records
      allow delete: if isAdmin();
    }
    
    // Access permissions for medical history
    match /acceso_historial/{accessId} {
      allow read: if isAuthenticated() && 
                   (isAdmin() || 
                   isUser(resource.data.pacienteId) || 
                   isUser(resource.data.doctorId));
                   
      // Patients can grant access to their records
      allow create: if isAuthenticated() && 
                     request.resource.data.pacienteId == request.auth.uid;
                     
      // Only the patient can revoke access
      allow update, delete: if isAuthenticated() && 
                            isUser(resource.data.pacienteId);
    }
    
    // Payments collection security rules
    match /pagos/{pagoId} {
      // Users can see their own payments
      allow read: if isAuthenticated() && 
                   (isAdmin() || 
                   isUser(resource.data.usuarioId));
                   
      // Only system can create payment records
      allow create: if isAuthenticated() && isAdmin();
      
      // Only admins can update or delete payment records
      allow update, delete: if isAdmin();
    }
  }
}